// 格式化距离
function formatDistance(distance) {
  if (distance && distance / 1000 > 1) {
    return (distance / 1000).toFixed(2) + "km";
  } else {
    return Number(distance).toFixed(0) + "m";
  }
}

// 格式化日期
function formatDate(date) {
  if (date && date.length >= 8) {
    return (
      date.substring(0, 4) +
      "-" +
      date.substring(4, 6) +
      "-" +
      date.substring(6, 8)
    );
  }
}

// 格式化时间
function formatTime(time) {
  if (time && time.length >= 6) {
    var start = parseInt(time.substring(0, 2));
    var end = start + 1;
    return (
      start +
      ":" +
      time.substring(2, 4) +
      ":" +
      time.substring(4, 6) +
      "-" +
      end +
      ":" +
      time.substring(2, 4) +
      ":" +
      time.substring(4, 6)
    );
  }
}

// 格式化时间
function formatTimeSingal(time) {
  if (time && time.length >= 6) {
    return (
      time.substring(0, 2) +
      ":" +
      time.substring(2, 4) +
      ":" +
      time.substring(4, 6)
    );
  }
}

// 银行卡脱敏
function hiddenBankCard(bankNumber) {
  if (bankNumber && bankNumber.length > 0) {
    var regexp1 = getRegExp("[0-9]", "gi");
    var regexp2 = getRegExp("(.{4})", "g");
    var len = bankNumber.length;
    var strStart = bankNumber.substring(0, 6);
    var strCenter = bankNumber.substring(6, len - 4).replace(regexp1, "*");
    var strEnd = bankNumber.substring(len - 4);
    var hiddenNum = strStart + strCenter + strEnd;
    hiddenNum = hiddenNum.replace(regexp2, "$1 ");
    return hiddenNum;
  }
}

// 手机号脱敏
function hiddenPhone(phone) {
  if (phone && phone.length > 0) {
    var regexp = getRegExp("[0-9]", "gi");
    var s1 = phone.substring(0, 3);
    var s2 = phone.substring(7);
    var s3 = phone.substring(3, 7).replace(regexp, "*");
    return s1 + s3 + s2;
  }
}

// 验证姓名脱敏
function hiddenName(name) {
  if (name && name.length > 0) {
    var len = name.length;
    var first = name.substring(0, len - 1);
    return first + "*";
  }
}

// 姓名脱敏
function formatName(name) {
  if (name && name.length > 0) {
    var regexp = getRegExp("[\u4e00-\u9fa5]", "g");
    var len = name.length;
    var start = name.substring(0, len - 1).replace(regexp, "*");
    var end = name.substring(len - 1);
    return start + end;
  }
}

// 金额格式化 正则表达式为：\B(?=(?:\d{3})+$)（格式化可能会修改斜杠）
function formatAmount(amount) {
  if (amount && amount.length > 0) {
    var regexp = getRegExp("\B(?=(?:\d{3})+$)", "g");
    var strArr = parseFloat(amount).toFixed(2).toString().split(".");
    var hiddenNum = strArr[0].replace(regexp, ",") + "." + strArr[1];
    return hiddenNum;
  }
}

// 获取账号尾号
function tailNumber(account) {
  if (account && account.length > 0) {
    return account.slice(-4);
  }
}

// 时间戳转换
function getTime(time) {
  if (time && time.length > 0) {
    var date = getDate(time);
    var Y = date.getFullYear() + "-";
    var M =
      (date.getMonth() + 1 < 10
        ? "0" + (date.getMonth() + 1)
        : date.getMonth() + 1) + "-";
    var D = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
    return Y + M + D;
  }
}

//账户类别
function formatBankType(type) {
  if (type && type.length > 0) {
    switch (type) {
      case "PCRC":
        return "信用卡";
      case "PSAV":
        return "I类户";
      case "PSA2":
        return "II类户";
      case "PEA2":
        return "II类电子账户";
      case "PEA3":
        return "III类电子账户";
      case "PDPB":
        return "存折";
    }
  }
}
//账户类型
function formatAccountType(type) {
  if (type && type.length > 0) {
    switch (type) {
      case "PCRC":
        return "贷记卡";
      case "PSAV":
        return "借记卡";
      case "PSA2":
        return "借记卡";
      case "PEA2":
        return "电子账户";
      case "PEA3":
        return "电子账户";
      case "PDPB":
        return "存折";
    }
  }
}

module.exports = {
  formatDistance: formatDistance,
  formatDate: formatDate,
  formatTime: formatTime,
  hiddenBankCard: hiddenBankCard,
  hiddenPhone: hiddenPhone,
  hiddenName: hiddenName,
  formatName: formatName,
  formatAmount: formatAmount,
  formatTimeSingal: formatTimeSingal,
  tailNumber: tailNumber,
  getTime: getTime,
  formatBankType: formatBankType,
  formatAccountType: formatAccountType,
};
